{"version":3,"sources":["components/babylontest.js","App.js","reportWebVitals.js","index.js"],"names":["mystyle","width","height","ReactCanvas","props","canvasRef","useRef","useEffect","canvas","current","engine","Engine","scene","Scene","ambientColor","Color3","ArcRotateCamera","Math","PI","Vector3","attachControl","HemisphericLight","box","MeshBuilder","CreateBox","depth","greenMat","StandardMaterial","material","createDefaultXRExperienceAsync","uiOptions","sessionMode","createScene","runRenderLoop","render","window","addEventListener","resize","style","ref","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"0NAGMA,EAAU,CACZC,MAAO,QACPC,OAAQ,SA+CGC,EA5CK,SAAAC,GAEhB,IAAMC,EAAYC,iBAAO,MAuCzB,OArCAC,qBAAU,WACN,IAAMC,EAASH,EAAUI,QACnBC,EAAS,IAAIC,IAAOH,GAAQ,GAyB5BI,EAvBe,WACjB,IAAMA,EAAQ,IAAIC,IAAMH,GACxBE,EAAME,aAAe,IAAIC,IAAO,EAAG,EAAG,GAEvB,IAAIC,IAAgB,UAAWC,KAAKC,GAAK,EAAGD,KAAKC,GAAK,IAAK,EAAG,IAAIC,IAAQ,EAAG,EAAG,IACxFC,cAAcZ,GAAQ,GAEf,IAAIa,IAAiB,QAAS,IAAIF,KAAS,EAAG,EAAG,IAA/D,IAEMG,EAAMC,IAAYC,UAAU,MAAO,CAACtB,OAAQ,GAAKD,MAAO,GAAKwB,MAAO,IAAMb,GAC5Ec,EAAW,IAAIC,IAAiB,SAAUf,GACjDc,EAASZ,aAAe,IAAIC,IAAO,EAAG,EAAG,GACtCO,EAAIM,SAAWF,EAEJd,EAAMiB,+BAA+B,CAC5CC,UAAW,CACPC,YAAa,kBAIrB,OAAOnB,EAGGoB,GACdtB,EAAOuB,eAAc,WACjBrB,EAAMsB,YAEVC,OAAOC,iBAAiB,UAAU,WAC9B1B,EAAO2B,cAGb,IAEK,oCAAQC,MAAOtC,EAASuC,IAAKlC,GAAeD,KCpCxCoC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ae47669d.chunk.js","sourcesContent":["import React, {useRef, useEffect} from 'react'\r\nimport {Engine, Scene, ArcRotateCamera, HemisphericLight, MeshBuilder, Vector3, StandardMaterial, Color3} from '@babylonjs/core'\r\n\r\nconst mystyle = {\r\n    width: \"100vw\",\r\n    height: \"100vh\"\r\n}\r\n\r\nconst ReactCanvas = props => {\r\n\r\n    const canvasRef = useRef(null)\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current\r\n        const engine = new Engine(canvas, true);\r\n\r\n        const createScene =  () => {\r\n            const scene = new Scene(engine);\r\n            scene.ambientColor = new Color3(1, 1, 1);\r\n\r\n            const camera = new ArcRotateCamera(\"camera\", -Math.PI / 2, Math.PI / 2.5, 3, new Vector3(0, 0, 0));\r\n            camera.attachControl(canvas, true);\r\n        \r\n            const light = new HemisphericLight(\"light\", new Vector3(-1, 1, 0));\r\n        \r\n            const box = MeshBuilder.CreateBox(\"box\", {height: 0.2, width: 0.2, depth: 0.2}, scene);\r\n            var greenMat = new StandardMaterial(\"redMat\", scene);\r\n\t        greenMat.ambientColor = new Color3(1, 0, 0);\r\n            box.material = greenMat;\r\n\r\n            const xr = scene.createDefaultXRExperienceAsync({\r\n                uiOptions: {\r\n                    sessionMode: \"immersive-ar\"\r\n                },\r\n            });\r\n\r\n            return scene;\r\n        }\r\n\r\n        const scene = createScene(); \r\n        engine.runRenderLoop(function () {\r\n            scene.render();\r\n        });\r\n        window.addEventListener(\"resize\", function () {\r\n            engine.resize();\r\n        });\r\n        \r\n    },[])\r\n\r\n    return <canvas style={mystyle} ref={canvasRef} {...props}></canvas>\r\n}\r\n\r\nexport default ReactCanvas","import './App.css';\nimport ReactCanvas from './components/babylontest';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ReactCanvas/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}